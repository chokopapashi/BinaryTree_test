def isort(xs: List[Int]): List[Int] = xs match {
    case List()   => List()
    case x :: xs1 => insert(x, isort(xs1))
}

def insert(x: Int, xs: List[Int]): List[Int] = xs match {
    case List()  => List(x)
    case y :: ys => if(x <= y) x :: xs
                    else       y :: insert(x, ys)
}

‡@isort((2,3,1))  = case 2 :: (3,1) => ‡Ainsert(2, ‡Bisort((3,1)))
‡Bisort((3,1))    = case 3 :: (1)   => ‡Cinsert(3, ‡Disort((1))
‡Disort((1))      = case 1 :: ()    => ‡Einsert(1, ‡Fisort(())
‡Fisort(())       = case ()         => ()
‡Einsert(1,())    = case ()         => (1) 
‡Cinsert(3,(1))   = case 1 :: ()    => (3 <= 1) 1 :: ‡Ginsert(3,())
‡Ginsert(3,())    = case ()         => (3) 
‡Ainsert(2,(1,3)) = case 1 :: (3)   => (2 <= 1) 1 :: ‡Hinsert(2, (3))
‡Hinsert(2,(3))   = case 2 :: (3)   => (2 <= 3) 2 :: 3
‡@(1,2,3)



/* vim: set ft=scala: */
